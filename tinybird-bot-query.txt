# Tinybird Bot Query

## Query to analyze bot traffic in analytics_events

```sql
SELECT 
    -- Check if user-agent matches bot patterns
    CASE 
        WHEN match(JSONExtractString(payload, 'user-agent'), '(?i)(wget|ahrefsbot|curl|bot|crawler|spider|urllib|bitdiscovery|\\+https:\\/\\/|googlebot)')
        THEN 'bot'
        ELSE 'not_bot'
    END AS is_bot,
    
    -- Count events
    COUNT(*) as event_count,
    
    -- Calculate percentage
    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM analytics_events) as percentage
    
FROM analytics_events
GROUP BY is_bot
ORDER BY event_count DESC;
```

## Additional query to see top user agents identified as bots

```sql
SELECT 
    JSONExtractString(payload, 'user-agent') as user_agent,
    COUNT(*) as event_count
FROM analytics_events
WHERE match(JSONExtractString(payload, 'user-agent'), '(?i)(wget|ahrefsbot|curl|bot|crawler|spider|urllib|bitdiscovery|\\+https:\\/\\/|googlebot)')
GROUP BY user_agent
ORDER BY event_count DESC
LIMIT 20;
```

## Query to check for Googlebot specifically being classified as Android

```sql
SELECT 
    JSONExtractString(payload, 'user-agent') as user_agent,
    JSONExtractString(payload, 'device') as device,
    JSONExtractString(payload, 'os') as os,
    COUNT(*) as event_count
FROM analytics_events
WHERE match(JSONExtractString(payload, 'user-agent'), '(?i)googlebot')
GROUP BY user_agent, device, os
ORDER BY event_count DESC;
```

## Query to analyze bot traffic by unique sessions

```sql
SELECT 
    -- Check if user-agent matches bot patterns
    CASE 
        WHEN match(JSONExtractString(payload, 'user-agent'), '(?i)(wget|ahrefsbot|curl|bot|crawler|spider|urllib|bitdiscovery|\\+https:\\/\\/|googlebot)')
        THEN 'bot'
        ELSE 'not_bot'
    END AS is_bot,
    
    -- Count unique sessions
    COUNT(DISTINCT session_id) as unique_sessions,
    
    -- Calculate percentage
    COUNT(DISTINCT session_id) * 100.0 / (SELECT COUNT(DISTINCT session_id) FROM analytics_events) as percentage
    
FROM analytics_events
GROUP BY is_bot
ORDER BY unique_sessions DESC;
```

## Alternative: Using the materialized view _mv_hits (if you have access)

If you have access to the _mv_hits materialized view which has parsed fields:

```sql
-- Bot traffic breakdown using materialized view
SELECT 
    device,
    COUNT(*) as event_count,
    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM _mv_hits) as percentage
FROM _mv_hits
WHERE device = 'bot'
GROUP BY device

UNION ALL

SELECT 
    'not_bot' as device,
    COUNT(*) as event_count,
    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM _mv_hits) as percentage
FROM _mv_hits
WHERE device != 'bot'
ORDER BY event_count DESC;
```