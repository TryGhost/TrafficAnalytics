name: "Lint & Test"
description: "Lint and test the codebase"

inputs:
  development-image:
    description: Development docker image to use for linting and unit/integration testing
    required: true
  production-image:
    description: Production docker image to use for E2E testing
    required: true

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4

    # Lint
    - name: Lint
      shell: bash
      run: |
        export DOCKER_IMAGE_DEVELOPMENT=${{ inputs.development-image }}
        export DOCKER_IMAGE_PRODUCTION=${{ inputs.production-image }}
        docker compose -f compose.yml -f ${{ github.action_path }}/compose.ci.yml run --rm lint

    # Test with compose (includes Firestore emulator)
    - name: Test
      shell: bash
      run: |
        export DOCKER_IMAGE_DEVELOPMENT=${{ inputs.development-image }}
        export DOCKER_IMAGE_PRODUCTION=${{ inputs.production-image }}
        docker compose -f compose.yml -f ${{ github.action_path }}/compose.ci.yml run --rm test

    # E2E Test - using production image for services, development image for test runner
    - name: Start services for E2E tests
      shell: bash
      run: |
        export DOCKER_IMAGE_DEVELOPMENT=${{ inputs.development-image }}
        export DOCKER_IMAGE_PRODUCTION=${{ inputs.production-image }}
        docker compose -f compose.yml -f ${{ github.action_path }}/compose.ci.yml up -d
        
    - name: Run E2E tests
      shell: bash
      run: |
        export DOCKER_IMAGE_DEVELOPMENT=${{ inputs.development-image }}
        export DOCKER_IMAGE_PRODUCTION=${{ inputs.production-image }}
        docker compose -f compose.yml -f ${{ github.action_path }}/compose.ci.yml run --rm e2e-test

    # Copy coverage report from test container
    - name: Copy coverage report
      shell: bash
      run: |
        export DOCKER_IMAGE_DEVELOPMENT=${{ inputs.development-image }}
        export DOCKER_IMAGE_PRODUCTION=${{ inputs.production-image }}
        CONTAINER_ID=$(docker compose -f compose.yml -f ${{ github.action_path }}/compose.ci.yml ps -q test | head -1)
        if [ ! -z "$CONTAINER_ID" ]; then
          if docker cp $CONTAINER_ID:/app/coverage/cobertura-coverage.xml .; then
            echo "Coverage report copied successfully"
          else
            echo "Warning: No coverage file found"
          fi
        fi

    # Upload coverage reports
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        files: ./cobertura-coverage.xml
        fail_ci_if_error: false

    # Cleanup compose services
    - name: Cleanup compose services
      shell: bash
      if: always()
      run: |
        export DOCKER_IMAGE_DEVELOPMENT=${{ inputs.development-image }}
        export DOCKER_IMAGE_PRODUCTION=${{ inputs.production-image }}
        docker compose -f compose.yml -f ${{ github.action_path }}/compose.ci.yml down
