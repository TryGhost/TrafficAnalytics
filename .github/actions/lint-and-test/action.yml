name: "Lint & Test"
description: "Lint and test the codebase"

inputs:
  docker-image:
    description: Which docker image to run linting and testing on
    required: true

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4

    - name: Generate UUID
      shell: bash
      run: echo "UUID=$(uuidgen)" >> $GITHUB_ENV

    # Start container for linting (no dependencies needed)
    - name: Start container for linting
      shell: bash
      run: docker run -d --label "uuid=${{ env.UUID }}" ${{ inputs.docker-image }}

    # Get container ID and put in environment variable for later use
    - name: Get container ID
      shell: bash
      run: echo "CONTAINER_ID=$(docker ps --filter "label=uuid=${{ env.UUID }}" -q)" >> $GITHUB_ENV

    # Lint
    - name: Lint
      shell: bash
      run: docker exec ${{ env.CONTAINER_ID }} yarn lint

    # Shutdown linting container
    - name: Shutdown linting container
      shell: bash
      if: always()
      run: docker rm -f ${{ env.CONTAINER_ID }}

    # Test with compose (includes Firestore emulator)
    - name: Test
      shell: bash
      run: |
        export DOCKER_IMAGE=${{ inputs.docker-image }}
        docker compose -f ${{ github.action_path }}/compose.ci.yml run --rm test

    # Copy coverage report from test container
    - name: Copy coverage report
      shell: bash
      run: |
        export DOCKER_IMAGE=${{ inputs.docker-image }}
        CONTAINER_ID=$(docker compose -f ${{ github.action_path }}/compose.ci.yml ps -q test | head -1)
        if [ ! -z "$CONTAINER_ID" ]; then
          docker cp $CONTAINER_ID:/app/coverage/cobertura-coverage.xml . || echo "No coverage file found"
        fi

    # Upload coverage reports
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success() && inputs.node-version == 20
      with:
        files: ./cobertura-coverage.xml
        fail_ci_if_error: false

    # Cleanup compose services
    - name: Cleanup compose services
      shell: bash
      if: always()
      run: |
        export DOCKER_IMAGE=${{ inputs.docker-image }}
        docker compose -f ${{ github.action_path }}/compose.ci.yml down
